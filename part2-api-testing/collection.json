{
	"info": {
		"_postman_id": "df0af4df-cbc4-4025-9633-c890c51ff56f",
		"name": "Kantox QA Challenge API Tests with Contract Testing",
		"description": "API tests for Kantox QA Challenge incorporating contract testing principles.\n\n## Contract Testing Approach\n\nThis collection implements consumer-driven contract testing principles, treating the Postman tests as \"consumers\" that define expectations about how the API (\"provider\") should behave. Key aspects:\n\n1. **Schema Validation**: Each endpoint test includes schema validation to ensure the response matches the expected structure.\n2. **Consumer Requirements**: Tests reflect what a consumer needs from the API.\n3. **Provider States**: Tests establish and verify provider states (e.g., creating a resource, then fetching it, then deleting it and verifying deletion).\n4. **Minimal Examples**: Tests use minimal examples to validate contracts, not extensive functionality.\n5. **Clear Expectations**: Tests explicitly define what consumers expect from each endpoint, including success and error cases.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21689954"
	},
	"item": [
		{
			"name": "Posts Contract Tests",
			"item": [
				{
					"name": "Get All Posts - Contract Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for GET /posts endpoint",
									"",
									"// 1. Basic contract expectations",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header exists and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// 2. Schema validation - the core of contract testing",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Response is an array of post objects matching schema\", function () {",
									"    pm.expect(Array.isArray(responseJson)).to.be.true;",
									"    ",
									"    // Define the post schema - this is the \"contract\"",
									"    const postSchema = {",
									"        \"type\": \"object\",",
									"        \"required\": [\"id\", \"title\", \"author\"],",
									"        \"properties\": {",
									"            \"id\": { \"type\": [\"number\", \"string\"] }, // JSON server might use numbers or strings depending on creation",
									"            \"title\": { \"type\": \"string\" },",
									"            \"author\": { \"type\": \"string\" }",
									"        },",
									"        \"additionalProperties\": false // Ensure no unexpected properties",
									"    };",
									"    ",
									"    // Validate each post against the schema",
									"    if (responseJson.length > 0) {",
									"        responseJson.forEach(function(post) {",
									"            let validationResult = tv4.validateResult(post, postSchema);",
									"            pm.expect(validationResult.valid, `Post validation failed: ${validationResult.error ? validationResult.error.message : 'Unknown error'} at ${validationResult.error ? validationResult.error.dataPath : ''}`).to.be.true;",
									"        });",
									"    } else {",
									"        console.log(\"Skipping individual post schema validation as the array is empty.\");",
									"    }",
									"});",
									"",
									"// 3. Store state for future tests - part of contract testing's state verification",
									"if (responseJson.length > 0 && responseJson[0].id) {",
									"    pm.environment.set(\"existingPostId\", responseJson[0].id);",
									"    console.log(\"Stored existingPostId=\" + responseJson[0].id + \" for state verification in subsequent tests\");",
									"} else {",
									"    console.log(\"Could not store existingPostId, response array might be empty or first item lacks id.\");",
									"     // Set a default value if needed for subsequent tests or handle appropriately",
									"     // pm.environment.set(\"existingPostId\", \"DEFAULT_ID_IF_NEEDED\"); ",
									"}",
									"",
									"// 4. Document the contract",
									"console.log(\"Contract Verified: GET /posts returns array of post objects each with id(number/string), title(string), and author(string)\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "Contract test for getting all posts. This verifies that the provider (API) fulfills the consumer's expectation of receiving a list of posts with specific attributes."
					},
					"response": []
				},
				{
					"name": "Get Single Post - Contract Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure we have an ID to test with",
									"if (!pm.environment.get(\"existingPostId\")) {",
									"    console.error(\"Pre-request check failed: 'existingPostId' not set. Cannot run Get Single Post test.\");",
									"    // Optionally, skip the request if the variable is missing",
									"    // postman.setNextRequest(null); ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for GET /posts/{id} endpoint",
									"const expectedPostId = pm.environment.get(\"existingPostId\");",
									"",
									"// Skip test if prerequisite ID is missing",
									"if (!expectedPostId) {",
									"    pm.test.skip(\"Skipping test as 'existingPostId' is not set\");",
									"} else {",
									"    // 1. Basic contract expectations",
									"    pm.test(\"Status code is 200 OK\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Content-Type header exists and is application/json\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    });",
									"",
									"    // 2. Schema validation - the core of contract testing",
									"    const responseJson = pm.response.json();",
									"",
									"    pm.test(\"Response is a single post object matching schema\", function () {",
									"        // Define the post schema - this is the \"contract\"",
									"        const postSchema = {",
									"            \"type\": \"object\",",
									"            \"required\": [\"id\", \"title\", \"author\"],",
									"            \"properties\": {",
									"                \"id\": { \"type\": [\"number\", \"string\"] }, // Allow number or string based on previous test",
									"                \"title\": { \"type\": \"string\" },",
									"                \"author\": { \"type\": \"string\" }",
									"            },",
									"            \"additionalProperties\": false",
									"        };",
									"        ",
									"        // Validate post against the schema",
									"         let validationResult = tv4.validateResult(responseJson, postSchema);",
									"            pm.expect(validationResult.valid, `Post validation failed: ${validationResult.error ? validationResult.error.message : 'Unknown error'} at ${validationResult.error ? validationResult.error.dataPath : ''}`).to.be.true;",
									"    });",
									"",
									"    // 3. Verify state - part of contract testing's state verification",
									"    pm.test(\"Post has the requested ID (state verification)\", function () {",
									"        // Compare potentially different types (number vs string)",
									"        pm.expect(String(responseJson.id)).to.eql(String(expectedPostId));",
									"    });",
									"",
									"    // 4. Document the contract",
									"    console.log(\"Contract Verified: GET /posts/{id} returns a post object with id, title, and author matching the schema\")",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/{{existingPostId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{existingPostId}}"
							]
						},
						"description": "Contract test for getting a single post. This verifies that the provider (API) fulfills the consumer's expectation of receiving a specific post with attributes matching the schema."
					},
					"response": []
				},
				{
					"name": "Create Post - Contract Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for POST /posts endpoint",
									"",
									"// 1. Basic contract expectations",
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type header exists and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// 2. Schema validation - the core of contract testing",
									"const responseJson = pm.response.json();",
									"const requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"pm.test(\"Response is a post object matching schema with created data\", function () {",
									"    // Define the post schema - this is the \"contract\"",
									"    const postSchema = {",
									"        \"type\": \"object\",",
									"        \"required\": [\"id\", \"title\", \"author\"],",
									"        \"properties\": {",
									"            \"id\": { \"type\": [\"number\", \"string\"] }, // JSON Server usually assigns number here, but allow string for safety",
									"            \"title\": { \"type\": \"string\" },",
									"            \"author\": { \"type\": \"string\" }",
									"        },",
									"        \"additionalProperties\": false",
									"    };",
									"    ",
									"    // Validate post against the schema",
									"    let validationResult = tv4.validateResult(responseJson, postSchema);",
									"     pm.expect(validationResult.valid, `Post validation failed: ${validationResult.error ? validationResult.error.message : 'Unknown error'} at ${validationResult.error ? validationResult.error.dataPath : ''}`).to.be.true;",
									"    ",
									"    // Verify the returned data matches what we sent (except for the ID which is assigned by the server)",
									"    pm.expect(responseJson.title).to.eql(requestBody.title);",
									"    pm.expect(responseJson.author).to.eql(requestBody.author);",
									"});",
									"",
									"// 3. State management - store new state for future tests",
									"if (responseJson.id) {",
									"    pm.environment.set(\"newPostId\", responseJson.id);",
									"    console.log(\"Stored newPostId=\" + responseJson.id + \" for state verification in subsequent tests\");",
									"} else {",
									"     console.error(\"Could not store newPostId, response did not contain an id.\");",
									"}",
									"",
									"",
									"// 4. Document the contract",
									"console.log(\"Contract Verified: POST /posts creates and returns a post object with server-assigned id plus submitted title and author\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Contract Test Post\",\n    \"author\": \"Contract Tester\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "Contract test for creating a post. This verifies that the provider (API) accepts the consumer's post creation request and responds with the created resource including server-assigned ID."
					},
					"response": []
				},
				{
					"name": "Update Post - Contract Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure we have an ID to test with",
									"if (!pm.environment.get(\"newPostId\")) {",
									"    console.error(\"Pre-request check failed: 'newPostId' not set. Cannot run Update Post test.\");",
									"    // Optionally, skip the request if the variable is missing",
									"    // postman.setNextRequest(null); ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for PUT /posts/{id} endpoint",
									"const expectedPostId = pm.environment.get(\"newPostId\");",
									"",
									"// Skip test if prerequisite ID is missing",
									"if (!expectedPostId) {",
									"    pm.test.skip(\"Skipping test as 'newPostId' is not set\");",
									"} else {",
									"    // 1. Basic contract expectations",
									"    pm.test(\"Status code is 200 OK\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Content-Type header exists and is application/json\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    });",
									"",
									"    // 2. Schema validation - the core of contract testing",
									"    const responseJson = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"",
									"    pm.test(\"Response is a post object matching schema with updated data\", function () {",
									"        // Define the post schema - this is the \"contract\"",
									"        const postSchema = {",
									"            \"type\": \"object\",",
									"            \"required\": [\"id\", \"title\", \"author\"],",
									"            \"properties\": {",
									"                \"id\": { \"type\": [\"number\", \"string\"] },",
									"                \"title\": { \"type\": \"string\" },",
									"                \"author\": { \"type\": \"string\" }",
									"            },",
									"            \"additionalProperties\": false",
									"        };",
									"        ",
									"        // Validate post against the schema",
									"        let validationResult = tv4.validateResult(responseJson, postSchema);",
									"        pm.expect(validationResult.valid, `Post validation failed: ${validationResult.error ? validationResult.error.message : 'Unknown error'} at ${validationResult.error ? validationResult.error.dataPath : ''}`).to.be.true;",
									"        ",
									"        // Verify the returned data matches what we sent",
									"        pm.expect(responseJson.title).to.eql(requestBody.title);",
									"        pm.expect(responseJson.author).to.eql(requestBody.author);",
									"    });",
									"",
									"    // 3. Verify state - part of contract testing's state verification",
									"    pm.test(\"Post ID remains unchanged (state verification)\", function () {",
									"        pm.expect(String(responseJson.id)).to.eql(String(expectedPostId));",
									"    });",
									"",
									"    // 4. Document the contract",
									"    console.log(\"Contract Verified: PUT /posts/{id} updates and returns a post object with unchanged id plus updated title and author\")",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Updated Contract Test Post\",\n    \"author\": \"Updated Contract Tester\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/posts/{{newPostId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{newPostId}}"
							]
						},
						"description": "Contract test for updating a post. This verifies that the provider (API) accepts the consumer's post update request and responds with the updated resource maintaining the same ID."
					},
					"response": []
				},
				{
					"name": "Delete Post - Contract Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure we have an ID to test with",
									"if (!pm.environment.get(\"newPostId\")) {",
									"    console.error(\"Pre-request check failed: 'newPostId' not set. Cannot run Delete Post test.\");",
									"    // postman.setNextRequest(null); ",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for DELETE /posts/{id} endpoint",
									"const deletedPostId = pm.environment.get(\"newPostId\");",
									"// --- FIX: Capture baseURL before the async call ---",
									"const baseURL = pm.environment.get(\"baseURL\"); ",
									"",
									"// Skip test if prerequisite ID is missing",
									"if (!deletedPostId) {",
									"    pm.test.skip(\"Skipping test as 'newPostId' is not set\");",
									"} else {",
									"    // 1. Basic contract expectations",
									"    pm.test(\"Status code is 200 OK\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // 2. Schema validation - DELETE often returns empty object {} with JSON Server",
									"    pm.test(\"Response is an empty JSON object\", function () {",
									"        try {",
									"            const responseJson = pm.response.json();",
									"            pm.expect(responseJson).to.be.an('object').that.is.empty;",
									"        } catch (e) {",
									"            // Fail the test if response is not valid JSON or not an empty object",
									"            pm.expect.fail(\"Response was not an empty JSON object. Error: \" + e.message);",
									"        }",
									"    });",
									"",
									"    // 3. State verification - check that resource is actually deleted",
									"    // This is crucial for contract testing - verifying the provider state changed as expected",
									"    pm.test(\"Verify resource is deleted (GET returns 404)\", function() {",
									"        // --- FIX: Add check to ensure baseURL was captured ---",
									"        if (!baseURL) {",
									"            pm.expect.fail(\"baseURL environment variable is not set!\");",
									"            return; // Stop this test if baseURL is missing",
									"        }",
									"",
									"        // --- FIX: Use the captured baseURL variable ---",
									"        const getDeletedUrl = `${baseURL}/posts/${deletedPostId}`; ",
									"        console.log(`Sending verification request to: ${getDeletedUrl}`); // Added for debugging",
									"",
									"        pm.sendRequest(getDeletedUrl, (err, res) => {",
									"            // Check for errors during the sendRequest itself (like network issues)",
									"            if (err) {",
									"                console.error(\"Error sending verification request:\", err);",
									"                // Provide more details in the failure message",
									"                pm.expect.fail(`Failed to send verification GET request to ${getDeletedUrl}. Error: ${err.message || err}`);",
									"            } else {",
									"                 // Check the response status of the verification request",
									"                 console.log(`Verification response status: ${res.code}`); // Added for debugging",
									"                pm.expect(res, `Verification GET request to ${getDeletedUrl} should return 404`).to.have.property('code', 404);",
									"            }",
									"        });",
									"    });",
									"",
									"    // 4. Clean up environment variable ",
									"    // Note: This unset happens before the async verification *completes*, ",
									"    // but deletedPostId was captured earlier, so it's okay.",
									"    pm.environment.unset(\"newPostId\");",
									"    console.log(\"Unset newPostId after initiating delete verification.\");",
									"",
									"    // 5. Document the contract",
									"    console.log(\"Contract Verified: DELETE /posts/{id} removes the resource and returns empty object, subsequent GET returns 404\")",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/{{newPostId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{newPostId}}"
							]
						},
						"description": "Contract test for deleting a post. This verifies that the provider (API) accepts the consumer's deletion request and confirms that the resource is no longer available."
					},
					"response": []
				}
			],
			"description": "Contract tests for the posts endpoints. These tests verify that the API behaves according to the expected contract from a consumer perspective."
		},
		{
			"name": "Comments Contract Tests",
			"item": [
				{
					"name": "Get All Comments - Contract Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for GET /comments endpoint",
									"",
									"// 1. Basic contract expectations",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header exists and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// 2. Schema validation - the core of contract testing",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Response is an array of comment objects matching schema\", function () {",
									"    pm.expect(Array.isArray(responseJson)).to.be.true;",
									"    ",
									"    // Define the comment schema - this is the \"contract\"",
									"    const commentSchema = {",
									"        \"type\": \"object\",",
									"        \"required\": [\"id\", \"body\", \"postId\"],",
									"        \"properties\": {",
									"            \"id\": { \"type\": [\"number\", \"string\"] },",
									"            \"body\": { \"type\": \"string\" },",
									"            \"postId\": { \"type\": [\"number\", \"string\"] } // postId might be number or string",
									"        },",
									"         \"additionalProperties\": false",
									"    };",
									"    ",
									"    // Validate each comment against the schema",
									"    if (responseJson.length > 0) {",
									"        responseJson.forEach(function(comment) {",
									"            let validationResult = tv4.validateResult(comment, commentSchema);",
									"            pm.expect(validationResult.valid, `Comment validation failed: ${validationResult.error ? validationResult.error.message : 'Unknown error'} at ${validationResult.error ? validationResult.error.dataPath : ''}`).to.be.true;",
									"        });",
									"    } else {",
									"        console.log(\"Skipping individual comment schema validation as the array is empty.\");",
									"    }",
									"});",
									"",
									"// 3. Store state for future tests - part of contract testing's state verification",
									"if (responseJson.length > 0 && responseJson[0].id) {",
									"    pm.environment.set(\"existingCommentId\", responseJson[0].id);",
									"    console.log(\"Stored existingCommentId=\" + responseJson[0].id + \" for state verification in subsequent tests\");",
									"    // Also store a postId if available, needed for creating new comments relative to an existing post",
									"    if(responseJson[0].postId) {",
									"       pm.environment.set(\"existingCommentPostId\", responseJson[0].postId); ",
									"       console.log(\"Stored existingCommentPostId=\" + responseJson[0].postId);",
									"    }",
									"} else {",
									"    console.log(\"Could not store existingCommentId, response array might be empty or first item lacks id.\");",
									"    // If no comments exist, we might need a default postId from the 'posts' setup to create one",
									"    if (!pm.environment.get(\"existingCommentPostId\") && pm.environment.get(\"existingPostId\")) {",
									"       pm.environment.set(\"existingCommentPostId\", pm.environment.get(\"existingPostId\"));",
									"       console.log(\"Using existingPostId as existingCommentPostId for creating comments.\")",
									"    }",
									"}",
									"",
									"// 4. Document the contract",
									"console.log(\"Contract Verified: GET /comments returns array of comment objects each with id, body, and postId matching schema\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						},
						"description": "Contract test for getting all comments. This verifies that the provider (API) fulfills the consumer's expectation of receiving a list of comments with specific attributes."
					},
					"response": []
				},
				{
					"name": "Get Single Comment - Contract Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure we have an ID to test with",
									"if (!pm.environment.get(\"existingCommentId\")) {",
									"    console.error(\"Pre-request check failed: 'existingCommentId' not set. Cannot run Get Single Comment test.\");",
									"    // postman.setNextRequest(null); ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for GET /comments/{id} endpoint",
									"const expectedCommentId = pm.environment.get(\"existingCommentId\");",
									"",
									"// Skip test if prerequisite ID is missing",
									"if (!expectedCommentId) {",
									"    pm.test.skip(\"Skipping test as 'existingCommentId' is not set\");",
									"} else {",
									"    // 1. Basic contract expectations",
									"    pm.test(\"Status code is 200 OK\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Content-Type header exists and is application/json\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    });",
									"",
									"    // 2. Schema validation",
									"    const responseJson = pm.response.json();",
									"    pm.test(\"Response is a single comment object matching schema\", function () {",
									"        const commentSchema = {",
									"            \"type\": \"object\",",
									"            \"required\": [\"id\", \"body\", \"postId\"],",
									"            \"properties\": {",
									"                \"id\": { \"type\": [\"number\", \"string\"] },",
									"                \"body\": { \"type\": \"string\" },",
									"                \"postId\": { \"type\": [\"number\", \"string\"] }",
									"            },",
									"            \"additionalProperties\": false",
									"        };",
									"        let validationResult = tv4.validateResult(responseJson, commentSchema);",
									"        pm.expect(validationResult.valid, `Comment validation failed: ${validationResult.error ? validationResult.error.message : 'Unknown error'} at ${validationResult.error ? validationResult.error.dataPath : ''}`).to.be.true;",
									"    });",
									"",
									"    // 3. Verify state ",
									"    pm.test(\"Comment has the requested ID (state verification)\", function () {",
									"        pm.expect(String(responseJson.id)).to.eql(String(expectedCommentId));",
									"    });",
									"",
									"    // 4. Document the contract",
									"    console.log(\"Contract Verified: GET /comments/{id} returns a comment object matching schema\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/{{existingCommentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{existingCommentId}}"
							]
						},
						"description": "Contract test for getting a single comment."
					},
					"response": []
				},
				{
					"name": "Create Comment - Contract Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure we have a post ID to associate the comment with",
									"let postId = pm.environment.get(\"existingCommentPostId\") || pm.environment.get(\"existingPostId\");",
									"if (!postId) {",
									"     console.error(\"Pre-request check failed: No suitable postId found ('existingCommentPostId' or 'existingPostId'). Cannot run Create Comment test.\");",
									"     // postman.setNextRequest(null); ",
									"} else {",
									"    pm.variables.set(\"targetPostId\", postId); // Use a temporary variable for the request body",
									"    console.log(\"Using targetPostId: \" + postId);",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for POST /comments endpoint",
									"const targetPostId = pm.variables.get(\"targetPostId\");",
									"",
									"// Skip test if prerequisite ID is missing",
									"if (!targetPostId) {",
									"    pm.test.skip(\"Skipping test as 'targetPostId' is not set\");",
									"} else {",
									"    // 1. Basic contract expectations",
									"    pm.test(\"Status code is 201 Created\", function () {",
									"        pm.response.to.have.status(201);",
									"    });",
									"",
									"    pm.test(\"Content-Type header exists and is application/json\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    });",
									"",
									"    // 2. Schema validation & Data verification",
									"    const responseJson = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.test(\"Response is a comment object matching schema with created data\", function () {",
									"        const commentSchema = {",
									"            \"type\": \"object\",",
									"            \"required\": [\"id\", \"body\", \"postId\"],",
									"            \"properties\": {",
									"                \"id\": { \"type\": [\"number\", \"string\"] },",
									"                \"body\": { \"type\": \"string\" },",
									"                \"postId\": { \"type\": [\"number\", \"string\"] }",
									"            },",
									"             \"additionalProperties\": false",
									"        };",
									"        let validationResult = tv4.validateResult(responseJson, commentSchema);",
									"        pm.expect(validationResult.valid, `Comment validation failed: ${validationResult.error ? validationResult.error.message : 'Unknown error'} at ${validationResult.error ? validationResult.error.dataPath : ''}`).to.be.true;",
									"        ",
									"        // Verify returned data matches submitted data (check postId type-insensitively)",
									"        pm.expect(responseJson.body).to.eql(requestBody.body);",
									"        pm.expect(String(responseJson.postId)).to.eql(String(requestBody.postId));",
									"    });",
									"",
									"    // 3. State management",
									"    if (responseJson.id) {",
									"        pm.environment.set(\"newCommentId\", responseJson.id);",
									"        console.log(\"Stored newCommentId=\" + responseJson.id + \" for subsequent tests\");",
									"    } else {",
									"        console.error(\"Could not store newCommentId, response did not contain an id.\");",
									"    }",
									"",
									"    // 4. Document the contract",
									"    console.log(\"Contract Verified: POST /comments creates and returns a comment object matching schema\")",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"This is a contract test comment\",\n    \"postId\": {{targetPostId}}\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							]
						},
						"description": "Contract test for creating a comment."
					},
					"response": []
				},
				{
					"name": "Update Comment - Contract Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure we have an ID to test with",
									"if (!pm.environment.get(\"newCommentId\")) {",
									"    console.error(\"Pre-request check failed: 'newCommentId' not set. Cannot run Update Comment test.\");",
									"    // postman.setNextRequest(null); ",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for PUT /comments/{id} endpoint",
									"const expectedCommentId = pm.environment.get(\"newCommentId\");",
									"",
									"// Skip test if prerequisite ID is missing",
									"if (!expectedCommentId) {",
									"    pm.test.skip(\"Skipping test as 'newCommentId' is not set\");",
									"} else {",
									"    // 1. Basic contract expectations",
									"    pm.test(\"Status code is 200 OK\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    pm.test(\"Content-Type header exists and is application/json\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"    });",
									"",
									"    // 2. Schema validation & Data verification",
									"    const responseJson = pm.response.json();",
									"    const requestBody = JSON.parse(pm.request.body.raw);",
									"    pm.test(\"Response is a comment object matching schema with updated data\", function () {",
									"        const commentSchema = {",
									"            \"type\": \"object\",",
									"            \"required\": [\"id\", \"body\", \"postId\"], // JSON Server PUT returns full object",
									"            \"properties\": {",
									"                \"id\": { \"type\": [\"number\", \"string\"] },",
									"                \"body\": { \"type\": \"string\" },",
									"                \"postId\": { \"type\": [\"number\", \"string\"] }",
									"            },",
									"            \"additionalProperties\": false",
									"        };",
									"         let validationResult = tv4.validateResult(responseJson, commentSchema);",
									"        pm.expect(validationResult.valid, `Comment validation failed: ${validationResult.error ? validationResult.error.message : 'Unknown error'} at ${validationResult.error ? validationResult.error.dataPath : ''}`).to.be.true;",
									"        ",
									"        // Verify updated data ",
									"        pm.expect(responseJson.body).to.eql(requestBody.body);",
									"        // Optionally verify postId didn't change if that's the expectation",
									"        // pm.expect(String(responseJson.postId)).to.eql(String(pm.environment.get(\"targetPostId\"))); ",
									"    });",
									"",
									"    // 3. Verify state",
									"    pm.test(\"Comment ID remains unchanged (state verification)\", function () {",
									"        pm.expect(String(responseJson.id)).to.eql(String(expectedCommentId));",
									"    });",
									"",
									"    // 4. Document the contract",
									"    console.log(\"Contract Verified: PUT /comments/{id} updates and returns a comment object matching schema\")",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"body\": \"This is the updated contract test comment\",\n    \"postId\": {{targetPostId}} \n    \n}"
						},
						"url": {
							"raw": "{{baseUrl}}/comments/{{newCommentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{newCommentId}}"
							]
						},
						"description": "Contract test for updating a comment."
					},
					"response": []
				},
				{
					"name": "Delete Comment - Contract Test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Ensure we have an ID to test with",
									"if (!pm.environment.get(\"newCommentId\")) {",
									"    console.error(\"Pre-request check failed: 'newCommentId' not set. Cannot run Delete Comment test.\");",
									"    // postman.setNextRequest(null); ",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for DELETE /comments/{id} endpoint",
									"const deletedCommentId = pm.environment.get(\"newCommentId\");",
									"// --- IMPROVEMENT: Capture baseURL before the async call ---",
									"const baseURL = pm.environment.get(\"baseURL\"); ",
									"",
									"// Skip test if prerequisite ID is missing",
									"if (!deletedCommentId) {",
									"    pm.test.skip(\"Skipping test as 'newCommentId' is not set\");",
									"} else {",
									"    // 1. Basic contract expectations",
									"    pm.test(\"Status code is 200 OK\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    // 2. Schema validation (Response Body Check)",
									"    pm.test(\"Response is an empty JSON object\", function () {",
									"       try {",
									"            const responseJson = pm.response.json();",
									"            pm.expect(responseJson).to.be.an('object').that.is.empty;",
									"        } catch (e) {",
									"            pm.expect.fail(\"Response was not an empty JSON object. Error: \" + e.message); ",
									"        }",
									"    });",
									"",
									"    // 3. State verification ",
									"     pm.test(\"Verify resource is deleted (GET returns 404)\", function() {",
									"        // --- IMPROVEMENT: Add check to ensure baseURL was captured ---",
									"        if (!baseURL) {",
									"            pm.expect.fail(\"baseURL environment variable is not set!\");",
									"            return; // Stop this test if baseURL is missing",
									"        }",
									"",
									"        // --- IMPROVEMENT: Use the captured baseURL variable ---",
									"        const getDeletedUrl = `${baseURL}/comments/${deletedCommentId}`; ",
									"        console.log(`Sending verification request to: ${getDeletedUrl}`); ",
									"",
									"        pm.sendRequest(getDeletedUrl, (err, res) => {",
									"            if (err) { ",
									"                console.error(\"Error sending verification request:\", err);",
									"                pm.expect.fail(`Failed to send verification GET request to ${getDeletedUrl}. Error: ${err.message || err}`);",
									"            } else {",
									"                console.log(`Verification response status: ${res.code}`); ",
									"                pm.expect(res, `Verification GET request to ${getDeletedUrl} should return 404`).to.have.property('code', 404); ",
									"            }",
									"        });",
									"    });",
									"",
									"    // 4. Clean up environment variable",
									"    pm.environment.unset(\"newCommentId\"); ",
									"    console.log(\"Unset newCommentId after initiating delete verification.\"); ",
									"",
									"    // 5. Document the contract",
									"    console.log(\"Contract Verified: DELETE /comments/{id} removes resource, returns empty object, subsequent GET returns 404\")",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/{{newCommentId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"{{newCommentId}}"
							]
						},
						"description": "Contract test for deleting a comment."
					},
					"response": []
				}
			],
			"description": "Contract tests for the comments endpoints."
		},
		{
			"name": "Profile Contract Tests",
			"item": [
				{
					"name": "Get Profile - Contract Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for GET /profile endpoint",
									"",
									"// 1. Basic contract expectations",
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type header exists and is application/json\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// 2. Schema validation - the core of contract testing",
									"const responseJson = pm.response.json();",
									"",
									"pm.test(\"Response is a profile object matching schema\", function () {",
									"    // Define the profile schema - this is the \"contract\"",
									"    const profileSchema = {",
									"        \"type\": \"object\",",
									"        \"required\": [\"name\"],",
									"        \"properties\": {",
									"            \"name\": { \"type\": \"string\" }",
									"        },",
									"        \"additionalProperties\": false",
									"    };",
									"    ",
									"    // Validate profile against the schema",
									"    let validationResult = tv4.validateResult(responseJson, profileSchema);",
									"    pm.expect(validationResult.valid, `Profile validation failed: ${validationResult.error ? validationResult.error.message : 'Unknown error'} at ${validationResult.error ? validationResult.error.dataPath : ''}`).to.be.true;",
									"});",
									"",
									"// 3. Document the contract",
									"console.log(\"Contract Verified: GET /profile returns a profile object with name(string) property\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profile"
							]
						},
						"description": "Contract test for getting the profile. This verifies that the provider (API) fulfills the consumer's expectation of receiving a profile object with the expected attributes."
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Contract Tests",
			"item": [
				{
					"name": "Get Non-existent Post - Error Contract Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for error response from GET /posts/{non-existent-id} endpoint",
									"// Error handling contracts are as important as success contracts",
									"",
									"// 1. Basic contract expectations for error response",
									"pm.test(\"Status code is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// 2. Error response validation (JSON Server often returns empty object)",
									"pm.test(\"Response is an empty JSON object\", function () {",
									"    try {",
									"            const responseJson = pm.response.json();",
									"            pm.expect(responseJson).to.be.an('object').that.is.empty;",
									"        } catch (e) {",
									"            pm.expect.fail(\"Response was not an empty JSON object. Error: \" + e.message);",
									"        }",
									"});",
									"",
									"// 3. Document the error contract",
									"console.log(\"Contract Verified: GET /posts/{non-existent-id} returns 404 Not Found with empty object body\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/posts/99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"99999"
							]
						},
						"description": "Contract test for error handling when getting a non-existent post. This verifies that the provider (API) responds appropriately when a consumer requests a resource that doesn't exist."
					},
					"response": []
				},
				{
					"name": "Create Post - Missing Required Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for error response when POSTing invalid data",
									"",
									"// --- Test Setup ---",
									"const expectedErrorStatusCode = 400; // Ideally, we expect 400 Bad Request for client errors",
									"const actualErrorStatusCode = 500; // We might accept 500 if server has internal issue processing bad data",
									"const incorrectSuccessStatusCode = 201;",
									"",
									"// --- Test Execution and Verification ---",
									"const responseStatusCode = pm.response.code;",
									"const responseBody = pm.response.text();",
									"let responseJson = null;",
									"try {",
									"    responseJson = pm.response.json();",
									"} catch (e) {",
									"    console.log(\"Response body is not valid JSON.\");",
									"}",
									"",
									"pm.test(`Status code should be an error (${expectedErrorStatusCode} or ${actualErrorStatusCode}), NOT ${incorrectSuccessStatusCode}`, function () {",
									"    // Check if we got the INCORRECT success code",
									"    if (responseStatusCode === incorrectSuccessStatusCode) {",
									"        ",
									"        let createdId = null;",
									"        if (responseJson && responseJson.id) {",
									"            createdId = responseJson.id;",
									"            console.warn(`API incorrectly returned ${incorrectSuccessStatusCode} Created for invalid data. Resource ID: ${createdId}. Attempting cleanup.`);",
									"            ",
									"            // --- Attempt Cleanup ---",
									"            const baseUrl = pm.environment.get(\"baseUrl\");",
									"            if (baseUrl && createdId) {",
									"                const deleteUrl = `${baseUrl}/posts/${createdId}`;",
									"                pm.sendRequest({",
									"                    url: deleteUrl,",
									"                    method: 'DELETE'",
									"                }, function (err, res) {",
									"                    if (err) {",
									"                        console.error(`Cleanup DELETE request failed for ${deleteUrl}:`, err);",
									"                    } else if (res.code === 200) {",
									"                        console.log(`Successfully cleaned up incorrectly created post with ID: ${createdId}`);",
									"                    } else {",
									"                         console.warn(`Cleanup DELETE for ID ${createdId} returned status ${res.code}`);",
									"                    }",
									"                });",
									"            } else {",
									"                 console.error(`Cannot attempt cleanup: baseUrl ('${baseUrl}') or createdId ('${createdId}') is missing.`);",
									"            }",
									"        } else {",
									"             console.error(`API incorrectly returned ${incorrectSuccessStatusCode} but response body did not contain an 'id' for cleanup.`);",
									"        }",
									"        ",
									"        // --- Explicitly FAIL the test ---",
									"        // Even though we attempted cleanup, the API's behavior was wrong.",
									"        pm.expect.fail(`API incorrectly returned ${incorrectSuccessStatusCode} Created for invalid data instead of an error status (e.g., ${expectedErrorStatusCode}/${actualErrorStatusCode}). Cleanup attempted.`);",
									"",
									"    } else {",
									"        // Check if we got one of the EXPECTED error codes",
									"        pm.expect(responseStatusCode, `Expected error status ${expectedErrorStatusCode} or ${actualErrorStatusCode}`).to.be.oneOf([expectedErrorStatusCode, actualErrorStatusCode]);",
									"        ",
									"        // If it was an expected error, check the body doesn't look like success",
									"        pm.test(\"Error response body should not contain created data\", function() {",
									"            pm.expect(responseBody).to.not.include('\"id\":'); ",
									"             // Add more specific error body checks if the API defines an error schema",
									"             // e.g., pm.expect(responseJson).to.have.property('error');",
									"        });",
									"    }",
									"});",
									"",
									"// Document the contract (what SHOULD happen)",
									"console.log(`Contract Verified: POST /posts with missing required field should return error status ${expectedErrorStatusCode} or ${actualErrorStatusCode}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"author\": \"Incomplete Tester\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						},
						"description": "Contract test verifying error handling when required fields are missing in POST request. Expecting 500 due to JSON server limitations."
					},
					"response": []
				},
				{
					"name": "Update Post - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for error response when PUTting to non-existent ID",
									"",
									"// 1. Basic contract expectations for error response",
									"pm.test(\"Status code is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// 2. Error response validation (JSON Server often returns empty object)",
									"pm.test(\"Response is an empty JSON object\", function () {",
									"     try {",
									"            const responseJson = pm.response.json();",
									"            pm.expect(responseJson).to.be.an('object').that.is.empty;",
									"        } catch (e) {",
									"            pm.expect.fail(\"Response was not an empty JSON object. Error: \" + e.message);",
									"        }",
									"});",
									"",
									"// 3. Document the error contract",
									"console.log(\"Contract Verified: PUT /posts/{non-existent-id} returns 404 Not Found with empty object body\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Ghost Post\",\n    \"author\": \"Ghost Author\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/posts/99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"99999"
							]
						},
						"description": "Contract test verifying error handling when updating a non-existent post."
					},
					"response": []
				},
				{
					"name": "Get Non-existent Comment - Error Contract Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Contract test for error response from GET /comments/{non-existent-id} endpoint",
									"",
									"pm.test(\"Status code is 404 Not Found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Response is an empty JSON object\", function () {",
									"    try {",
									"            const responseJson = pm.response.json();",
									"            pm.expect(responseJson).to.be.an('object').that.is.empty;",
									"        } catch (e) {",
									"            pm.expect.fail(\"Response was not an empty JSON object. Error: \" + e.message);",
									"        }",
									"});",
									"",
									"console.log(\"Contract Verified: GET /comments/{non-existent-id} returns 404 Not Found with empty object body\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/comments/99999",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								"99999"
							]
						},
						"description": "Contract test for error handling when getting a non-existent comment."
					},
					"response": []
				}
			],
			"description": "Tests verifying the API's contract for error conditions."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "existingPostId",
			"value": "",
			"type": "string"
		},
		{
			"key": "newPostId",
			"value": "",
			"type": "string"
		},
		{
			"key": "existingCommentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "newCommentId",
			"value": "",
			"type": "string"
		},
		{
			"key": "existingCommentPostId",
			"value": "",
			"type": "string"
		},
		{
			"key": "targetPostId",
			"value": "",
			"type": "string"
		}
	]
}